// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  username      String        @unique 
  name          String
  statusInfo    String?       @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  chatMembers   ChatMember[]
  chatMessages   ChatMessage[]
}

model Chat {
  id            String        @id @default(uuid())
  isGroup       Boolean
  title         String?       @unique
  description   String?       @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  chatMembers   ChatMember[]
  chatMessages  ChatMessage[]
}

model ChatMember {
  id            String        @id @default(uuid())
  isOwner       Boolean
  userId        String
  chatId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat          Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  @@unique([userId, chatId])
}

model ChatMessageStatus {
  id            String        @id @default(uuid())
  name          String        @unique
  chatMessages  ChatMessage[]
}

model ChatMessage {
  id                  String              @id @default(uuid())
  userId              String
  chatId              String
  statusId            String
  text                String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now()) @updatedAt
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat                Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatMessageStatus   ChatMessageStatus   @relation(fields: [statusId], references: [id], onDelete: Restrict)
}